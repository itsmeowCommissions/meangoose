buildscript {
    repositories {
        maven {
            url = "https://plugins.gradle.org/m2/"
        }
        maven {
            url = 'https://files.minecraftforge.net/maven'
        }
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
    }
}
apply plugin: net.minecraftforge.gradle.mcp.MCPPlugin
apply plugin: net.minecraftforge.gradle.userdev.UserDevPlugin
apply plugin: 'eclipse'
version = "${project.mc_version}-${project.mod_version}"
group = "${project.maven_group}"
archivesBaseName = "${project.mod_id}"
def at_name = project.hasProperty('at_name') ? "${project.at_name}" : ""
sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8'
tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}
repositories {
    flatDir {
        dirs 'libs'
    }
    maven {
        name = "itsmeow maven"
        url = "https://maven.itsmeow.dev/"
    }
    maven {
        url "https://maven.tterrag.com/"
    }
}
minecraft {
    mappings channel: project.mappings_channel, version: "${project.mappings_version}-${project.mappings_mc_version}"
    if (project.hasProperty('at_file')) {
        accessTransformer = file("src/main/resources/META-INF/${at_file}.cfg")
    }
    runs {
        client {
            workingDirectory project.file('run')
            property 'forge.logging.console.level', 'info'
            mods.create("${project.mod_id}").source(sourceSets.main);
        }
        server {
            workingDirectory project.file('run')
            property 'forge.logging.console.level', 'info'
            mods.create("${project.mod_id}").source(sourceSets.main);
        }
        data {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'
            args '--existing', file('src/main/resources'), '--mod', project.mod_id.toString(), '--all', '--output', file('src/generated/resources/')
            mods.create("${project.mod_id}").source(sourceSets.main);
        }
    }
}
dependencies {
    minecraft "net.minecraftforge:forge:${project.mc_version}-${project.forge_version}"
    implementation fg.deobf("dev.itsmeow.betteranimalsplus:betteranimalsplus:${project.bap_version}") {
        transitive = false
    }
}
sourceSets.main.resources.srcDirs += [ "src/generated/resources" ]
jar {
    manifest {
        mainAttributes(
            "Maven-Artifact": "${project.maven_group}:${project.archivesBaseName}:${project.version}",
            "Specification-Title": archivesBaseName,
            "Specification-Vendor": "its_meow",
            "Specification-Version": "1",
            "Implementation-Title": archivesBaseName,
            "Implementation-Version": "${project.mod_version}",
            "Implementation-Vendor": "its_meow",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
            "Built-On-Java": "${System.getProperty('java.vm.version')} (${System.getProperty('java.vm.vendor')})",
            "Built-On": "${project.mc_version}-${project.forge_version}"
        )
    }
}
task sourceJar(type: Jar, dependsOn: classes) {
    description = 'Creates a JAR containing the source code.'
    classifier = 'sources'
    from sourceSets.main.allSource
    manifest {
        mainAttributes(
            "Maven-Artifact": "${project.maven_group}:${project.archivesBaseName}:${project.version}",
            "Specification-Title": archivesBaseName,
            "Specification-Vendor": "its_meow",
            "Specification-Version": "1",
            "Implementation-Title": archivesBaseName + '-sources',
            "Implementation-Version": "${project.mod_version}",
            "Implementation-Vendor": "its_meow",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
            "Built-On-Java": "${System.getProperty('java.vm.version')} (${System.getProperty('java.vm.vendor')})",
            "Built-On": "${project.mc_version}-${project.forge_version}"
        )
    }
}
import groovy.json.JsonSlurper
import groovy.json.JsonOutput
processResources {
    doLast {
        def jsonMinifyStart = System.currentTimeMillis()
        def jsonMinified = 0
        def jsonBytesSaved = 0
        fileTree(dir: outputs.files.asPath, include: '**/*.json').each {
            File file = it
            jsonMinified++
            def oldLength = file.length()
            file.text = JsonOutput.toJson(new JsonSlurper().parse(file))
            jsonBytesSaved += oldLength - file.length()
        }
        println('Minified ' + jsonMinified + ' json files. Saved ' + jsonBytesSaved + ' bytes. Took ' + (System.currentTimeMillis() - jsonMinifyStart) + 'ms.')
    }
}